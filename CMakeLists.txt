cmake_minimum_required(VERSION 3.12)

project(Valando)

# Set Standar
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
set(CMAKE_INCLUDE_CURRENT_DIR TRUE)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/output)
if(NOT EXISTS ${EXECUTABLE_OUTPUT_PATH})
    file(MAKE_DIRECTORY ${EXECUTABLE_OUTPUT_PATH})
endif()

# Detect compiler
message(STATUS "CXX compiler id: ${CMAKE_CXX_COMPILER_ID}")
if(CMAKE_CXX_COMPILER_ID MATCHES Clang)
    set(COMPILER_IS_CLANG TRUE)
endif()
if(CMAKE_CXX_COMPILER_ID MATCHES GNU)
    set(COMPILER_IS_GNU TRUE)
endif()
if(CMAKE_CXX_COMPILER_ID MATCHES MSVC)
    set(COMPILER_IS_MSVC TRUE)
endif()

# Detect configure type
if(CMAKE_BUILD_TYPE MATCHES Debug)
    set(DEBUG TRUE)
elseif(CMAKE_BUILD_TYPE MATCHES Release)
    set(RELEASE TRUE)
endif()

# Find dependences' libraries and includes
if(WIN32)
    message(STATUS "Win32 Platform")
    set(GLAD_DIR glad-win32)
    if(COMPILER_IS_MSVC)
        add_link_options("/subsystem:\"windows\"")
    else()
        add_link_options(-mwindows)
    endif()
endif()
if(APPLE)
    message(STATUS "APPLE Platform")
    set(GLAD_DIR glad-macos)
endif()
find_package(glfw3 REQUIRED)
find_package(freetype REQUIRED)

# Wrap shader files -- helper functions
function(wrap_shader sh_name vsh_file fsh_file arg_wrap_shaders)
    file(READ ${vsh_file} vsh_content)
    file(READ ${fsh_file} fsh_content)

    set(temp_wrap_shaders ${${arg_wrap_shaders}})
    string(CONCAT temp_wrap_shaders "${temp_wrap_shaders}" "const auto ${sh_name}_vsh = R\"666.77.7(\n${vsh_content}\n)666.77.7\"\;\n")
    string(CONCAT temp_wrap_shaders "${temp_wrap_shaders}" "const auto ${sh_name}_fsh = R\"666.77.7(\n${fsh_content}\n)666.77.7\"\;\n")

    set(${arg_wrap_shaders} ${temp_wrap_shaders} PARENT_SCOPE)
endfunction()
function(generate_wrap_shader arg_wrap_shaders)
    set(WRAP_SHADER_INCLUDE_DIR ${PROJECT_BINARY_DIR}/wrap_shader_include)
    file(MAKE_DIRECTORY ${WRAP_SHADER_INCLUDE_DIR})

    set(temp_arg_wrap_shaders ${arg_wrap_shaders})

    string(CONCAT WRAP_SHADER_CONTENT
            "// This file is generated by cmake \n"
            "#ifndef _WRAP_SHADER_H_\n"
            "#define _WRAP_SHADER_H_\n"
            "namespace wrap_shaders{\n"
            "${temp_arg_wrap_shaders}"
            "}\n"
            "#endif")
    file(WRITE
             ${WRAP_SHADER_INCLUDE_DIR}/wrap_shaders.h
             "${WRAP_SHADER_CONTENT}"
            )
    include_directories(${WRAP_SHADER_INCLUDE_DIR})
endfunction()
function(create_wrap_shaders)
    # Check arguments' number
    math(EXPR is_valid "${ARGC} % 6")
    if(NOT ${is_valid} STREQUAL "0")
        message("Invalid arguments' number for create_wrap_shaders")
        return()
    endif()

    # Wrap 3 by 3
    math(EXPR n "${ARGC} - 1")
    foreach(i RANGE ${n})
        math(EXPR j "${i} % 6")
        if(${j} STREQUAL "0")
            math(EXPR a1_i "${i} + 1")
            math(EXPR a2_i "${i} + 3")
            math(EXPR a3_i "${i} + 5")

            list(GET ARGV ${a1_i} a1)
            list(GET ARGV ${a2_i} a2)
            list(GET ARGV ${a3_i} a3)

            wrap_shader(${a1} ${a2} ${a3} wrap_shaders)
        endif()
    endforeach()

    generate_wrap_shader("${wrap_shaders}")
endfunction()

# Wrap shaders into C header "wrap_shaders.h"
create_wrap_shaders(
        SHADER_NAME         tex
        VERTEX_SHADER       ${PROJECT_SOURCE_DIR}/resource/shader/tex.vsh
        FRAGMENT_SHADER     ${PROJECT_SOURCE_DIR}/resource/shader/tex.fsh

        SHADER_NAME         simple
        VERTEX_SHADER       ${PROJECT_SOURCE_DIR}/resource/shader/simple.vsh
        FRAGMENT_SHADER     ${PROJECT_SOURCE_DIR}/resource/shader/simple.fsh
)

# Include dirs
include_directories(${GLAD_DIR}/include)
include_directories(${glfw3_DIR}/../../../include)
include_directories(${FREETYPE_INCLUDE_DIRS})

# Build glad lib
add_library(glad glad-win32/src/glad.c)

# Build stb image lib
add_library(stb stb/stb_image.cpp stb/stb_image_write.cpp)

# Build project executable
add_executable(Valando main.cpp)
get_target_property(MAIN_TARGET_NAME Valando NAME)
target_link_libraries(Valando glad glfw stb ${FREETYPE_LIBRARIES})

# Copy resource files
if(APPLE)
    set(EXECUTABLE_DIR ${EXECUTABLE_OUTPUT_PATH}/${MAIN_TARGET_NAME}.app/Contents/MacOS)
    set_target_properties(
            ${MAIN_TARGET_NAME}
            PROPERTIES
            MACOSX_BUNDLE TRUE
    )
    set(MACOSX_BUNDLE_RESOURCES_DIR ${EXECUTABLE_OUTPUT_PATH}/${MAIN_TARGET_NAME}.app/Contents/Resources)
    add_custom_command(
            TARGET ${MAIN_TARGET_NAME}
            POST_BUILD
            COMMAND_EXPAND_LISTS
            COMMAND ${CMAKE_COMMAND} -E
                    make_directory  ${MACOSX_BUNDLE_RESOURCES_DIR}
            COMMAND ${CMAKE_COMMAND} -E
                    copy_directory ${PROJECT_SOURCE_DIR}/resource ${MACOSX_BUNDLE_RESOURCES_DIR}
            COMMENT "Copying resource files... for APPLE MACOSX BUNDLE"
    )
endif()
if(WIN32)
    set(EXECUTABLE_DIR ${EXECUTABLE_OUTPUT_PATH})
    set(RESOURCES_DIR ${EXECUTABLE_OUTPUT_PATH}/resource)
    add_custom_command(
            TARGET ${MAIN_TARGET_NAME}
            POST_BUILD
            COMMAND_EXPAND_LISTS
            COMMAND ${CMAKE_COMMAND} -E
                    make_directory  ${RESOURCES_DIR}
            COMMAND ${CMAKE_COMMAND} -E
                    copy_directory ${PROJECT_SOURCE_DIR}/resource ${RESOURCES_DIR}
            COMMENT "Copying resource files... for WIN32"
    )
endif()


